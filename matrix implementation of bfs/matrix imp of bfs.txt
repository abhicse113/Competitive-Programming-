// C++ Code implementation for above problem
#include <bits/stdc++.h>
using namespace std;
 
//#define N 100
//#define M 100
int dis[1090][1090]={0};int s1,s2;
// QItem for current location and distance
// from source location
class QItem {
public:
    int row;
    int col;
    int dist;
    QItem(int x, int y, int w)
        : row(x), col(y), dist(w)
    {
    }
};
 
void minDistance(int n,int m)
{
     char grid[n+50][m+50];
     for(int i=1;i<=n;i++)
     {
       for(int j=1;j<=m;j++)
          {
         cin>>grid[i][j];
          }
     }
     cin>>s1>>s2;grid[s1][s2]='s';
    QItem source(0, 0, 0);
   // int dis[100][100]={0};
    // To keep track of visited QItems. Marking
    // blocked cells as visited.
    bool visited[n+50][m+50];
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= m; j++)
        {
            if (grid[i][j] == '*')
                visited[i][j] = true;
            else
                visited[i][j] = false;
 
            // Finding source
            if (grid[i][j] == 's')
            {
               source.row = i;
               source.col = j;
            }
        }
    }
 
    // applying BFS on matrix cells starting from source
    queue<QItem> q;
    q.push(source);
    visited[source.row][source.col] = true;
    while (!q.empty()) {
        QItem p = q.front();
        q.pop();
 
        // Destination found;
        //if (grid[p.row][p.col] == 'd')
          //return p.dist;
 
        // moving up
        if (p.row - 1 >= 1 &&
            visited[p.row - 1][p.col] == false) {
            q.push(QItem(p.row - 1, p.col, p.dist + 1));
            visited[p.row - 1][p.col] = true;
            dis[p.row-1][p.col]=p.dist+1;
            //cout<<dis[p.row-1][p.col]<<" ";cout<<"p.row="<<p.row<<"p.col="<<p.col<<" ";
        }
 
        // moving down
        if (p.row + 1 <= n &&
            visited[p.row + 1][p.col] == false) {
            q.push(QItem(p.row + 1, p.col, p.dist + 1));
            visited[p.row + 1][p.col] = true;
            dis[p.row+1][p.col]=p.dist+1;
            //cout<<dis[p.row+1][p.col]<<" ";cout<<"p.row="<<p.row<<"p.col="<<p.col<<" ";
        }
 
        // moving left
        if (p.col - 1 >= 1 &&
            visited[p.row][p.col - 1] == false) {
            q.push(QItem(p.row, p.col - 1, p.dist + 1));
            visited[p.row][p.col - 1] = true;
            dis[p.row][p.col-1]=p.dist+1;
            //cout<<dis[p.row][p.col-1]<<" ";cout<<"p.row="<<p.row<<"p.col="<<p.col<<" ";
        }
 
         // moving right
        if (p.col + 1 <= m &&
            visited[p.row][p.col + 1] == false) {
            q.push(QItem(p.row, p.col + 1, p.dist + 1));
            visited[p.row][p.col + 1] = true;
            dis[p.row][p.col+1]=p.dist+1;
           // cout<<dis[p.row][p.col+1]<<" ";cout<<"p.row="<<p.row<<"p.col="<<p.col<<" ";
        }
    }/*cout<<endl;
    for(int i=0;i<6;i++){
        for(int j=0;j<5;j++){
        cout<<dis[i][j]<<" ";
        }cout<<endl;}*/
    //return 0;
}
 
// Driver code
int main()
{   int n,m,q1,d1,d2;
    cin>>n>>m>>q1;
 
 
       minDistance(n,m);
     
    //cout << minDistance(grid);
    while(q1--)
    {
        cin>>d1>>d2;
        if(s1==d1 && s2==d2){cout<<0<<endl;}
        else if(dis[d1][d2]==0){cout<<-1<<endl;}
        else{
            cout<<dis[d1][d2]<<endl;}
 
    }
 
    return 0;
}